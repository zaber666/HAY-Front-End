{"ast":null,"code":"var _jsxFileName = \"/home/zaber666/CSE 408/project/front-end/src/components/Questions.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./Questions.css\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Questions = () => {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]); //Load questions\n\n  useEffect(() => {\n    const getQuestions = async () => {\n      const questionsFromServer = await fetchQuestions();\n      setQuestions(questionsFromServer);\n    };\n\n    getQuestions();\n  }, []); //Fetch Tasks\n\n  const fetchQuestions = async () => {\n    const res = await fetch('http://localhost:8000/questions');\n    const data = await res.json();\n    return data;\n  }; //Add question answer\n\n\n  const addAnswer = e => {\n    // (tasks.filter( (task) => task.id !== id))\n    const quesId = e.target.name;\n    const ansId = e.target.value;\n    const newAnswers = answers.filter(answer => answer.quesId !== quesId);\n    const newDict = {};\n    newDict[\"quesId\"] = quesId;\n    newDict[\"ansId\"] = ansId;\n    const newAnswers2 = [...newAnswers, newDict];\n    setAnswers(newAnswers2);\n  };\n\n  const uploadAnswers = async ansInfo => {\n    const res = await fetch('http://localhost:8000/answers', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(ansInfo)\n    });\n    const data = await res.json();\n  };\n\n  const formSubmit = e => {\n    e.preventDefault(); // for(var idx in answers){\n    //     console.log(answers[idx].quesId)\n    // }\n\n    for (var i in questions) {\n      var flag = false;\n\n      for (var j in answers) {\n        if (questions[i].id === answers[j].quesId) {\n          flag = true;\n          break;\n        }\n      }\n\n      if (!flag) {\n        alert(\"Question \" + i + \" is not answered\");\n        return;\n      } // console.log(questions[idx].id)\n\n    }\n\n    uploadAnswers(answers);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmit,\n      children: [questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionTextContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionId\",\n            children: [question.id, \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questionText\",\n            children: question.questionText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: question.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionContainer\",\n            onChange: e => addAnswer(e),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              className: \"radio\",\n              name: question.id,\n              value: option.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 53\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: option.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 53\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 49\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"login-btn-modal\",\n        value: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Questions, \"o1tHf0aJL3A3BOBab9F+LeisEDI=\");\n\n_c = Questions;\nexport default Questions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","useEffect","Questions","questions","setQuestions","answers","setAnswers","getQuestions","questionsFromServer","fetchQuestions","res","fetch","data","json","addAnswer","e","quesId","target","name","ansId","value","newAnswers","filter","answer","newDict","newAnswers2","uploadAnswers","ansInfo","method","headers","body","JSON","stringify","formSubmit","preventDefault","i","flag","j","id","alert","map","question","questionText","options","option"],"sources":["/home/zaber666/CSE 408/project/front-end/src/components/Questions.js"],"sourcesContent":["import React from 'react'\nimport \"./Questions.css\"\nimport {useState, useEffect} from \"react\";\n\nconst Questions = () => {\n\n    const [questions, setQuestions] = useState([])\n    const [answers, setAnswers] = useState([])\n\n    //Load questions\n    useEffect( () => {\n        const getQuestions = async () => {\n        const questionsFromServer = await fetchQuestions()\n        setQuestions(questionsFromServer)\n        }\n\n        getQuestions()\n    }, [])\n\n    //Fetch Tasks\n    const fetchQuestions = async () => {\n        const res = await fetch('http://localhost:8000/questions')\n        const data = await res.json()\n        return data\n    }\n\n    //Add question answer\n    const addAnswer = (e) => {\n        // (tasks.filter( (task) => task.id !== id))\n        const quesId = e.target.name\n        const ansId = e.target.value\n        const newAnswers = answers.filter( (answer) => answer.quesId !== quesId)\n\n        const newDict = {}\n        newDict[\"quesId\"] = quesId\n        newDict[\"ansId\"] = ansId\n\n        const newAnswers2 = [...newAnswers, newDict]\n        setAnswers(newAnswers2)\n    }\n\n    const uploadAnswers = async (ansInfo) => {\n        const res = await fetch('http://localhost:8000/answers', \n            {\n                method: \"POST\", \n                headers: {'Content-type': 'application/json'}, \n                body: JSON.stringify(ansInfo)\n            }\n        )\n        const data = await res.json()\n    }\n\n    const formSubmit = (e) => {\n        e.preventDefault()\n        // for(var idx in answers){\n        //     console.log(answers[idx].quesId)\n        // }\n\n        for(var i in questions){\n            var flag = false\n            for(var j in answers){\n                if(questions[i].id === answers[j].quesId){\n                    flag = true\n                    break\n                }\n            }\n            if(!flag){\n                alert(\"Question \"+ i+ \" is not answered\")\n                return\n            }\n            // console.log(questions[idx].id)\n        }\n        uploadAnswers(answers)\n    }\n\n    return (\n        <div className='container'>\n            <form onSubmit={formSubmit}>\n\n            \n                {\n                    questions.map(\n                        (question) => (\n                            <div>\n                                <div className='questionTextContainer'>\n                                    <div className='questionId'>{question.id}.</div>\n                                    <div className='questionText'>{question.questionText}</div>\n                                </div>\n                                \n\n                                <div>\n                                    {\n                                        question.options.map(\n                                            (option) => (\n                                                \n                                                <div className='optionContainer' onChange={(e) => addAnswer(e)}>\n                                                    <input type=\"radio\" className='radio' name={question.id} value={option.id} ></input>\n                                                    {/* <div className='optionId'>{option.id}.</div> */}\n                                                    <div>{option.value}</div>\n                                                </div>\n                                            )\n                                        )\n                                    }\n                                </div>\n\n                            </div>\n                        )\n                    )\n                }\n\n                <input type=\"submit\" className=\"login-btn-modal\" value=\"Create\" />\n\n            </form>\n            \n        </div>\n    )\n}\n\nexport default Questions"],"mappings":"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"},"metadata":{},"sourceType":"module"}